// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_smart_contract_counter/test/dart/core/platform/smart_contract_web3_client_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:convert' as _i11;
import 'dart:typed_data' as _i12;

import 'package:http/http.dart' as _i9;
import 'package:http/src/base_request.dart' as _i13;
import 'package:http/src/response.dart' as _i2;
import 'package:http/src/streamed_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:web3dart/contracts.dart' as _i15;
import 'package:web3dart/credentials.dart' as _i4;
import 'package:web3dart/src/core/amount.dart' as _i6;
import 'package:web3dart/src/core/block_information.dart' as _i7;
import 'package:web3dart/src/core/block_number.dart' as _i14;
import 'package:web3dart/src/core/sync_information.dart' as _i5;
import 'package:web3dart/web3dart.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0 extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse_1 extends _i1.Fake implements _i3.StreamedResponse {
}

class _FakeEthPrivateKey_2 extends _i1.Fake implements _i4.EthPrivateKey {}

class _FakeBigInt_3 extends _i1.Fake implements BigInt {}

class _FakeSyncInformation_4 extends _i1.Fake implements _i5.SyncInformation {}

class _FakeEthereumAddress_5 extends _i1.Fake implements _i4.EthereumAddress {}

class _FakeEtherAmount_6 extends _i1.Fake implements _i6.EtherAmount {}

class _FakeBlockInformation_7 extends _i1.Fake implements _i7.BlockInformation {
}

class _FakeTransactionInformation_8 extends _i1.Fake
    implements _i8.TransactionInformation {}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i9.Client {
  @override
  _i10.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  _i10.Future<_i12.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i12.Uint8List>.value(_i12.Uint8List(0)))
          as _i10.Future<_i12.Uint8List>);
  @override
  _i10.Future<_i3.StreamedResponse> send(_i13.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_1()))
          as _i10.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [Web3Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeb3Client extends _i1.Mock implements _i8.Web3Client {
  @override
  bool get printErrors =>
      (super.noSuchMethod(Invocation.getter(#printErrors), returnValue: false)
          as bool);
  @override
  set printErrors(bool? _printErrors) =>
      super.noSuchMethod(Invocation.setter(#printErrors, _printErrors),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i4.EthPrivateKey> credentialsFromPrivateKey(
          String? privateKey) =>
      (super.noSuchMethod(
              Invocation.method(#credentialsFromPrivateKey, [privateKey]),
              returnValue:
                  Future<_i4.EthPrivateKey>.value(_FakeEthPrivateKey_2()))
          as _i10.Future<_i4.EthPrivateKey>);
  @override
  _i10.Future<String> getClientVersion() =>
      (super.noSuchMethod(Invocation.method(#getClientVersion, []),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  _i10.Future<int> getNetworkId() =>
      (super.noSuchMethod(Invocation.method(#getNetworkId, []),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<BigInt> getChainId() =>
      (super.noSuchMethod(Invocation.method(#getChainId, []),
              returnValue: Future<BigInt>.value(_FakeBigInt_3()))
          as _i10.Future<BigInt>);
  @override
  _i10.Future<bool> isListeningForNetwork() =>
      (super.noSuchMethod(Invocation.method(#isListeningForNetwork, []),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<int> getPeerCount() =>
      (super.noSuchMethod(Invocation.method(#getPeerCount, []),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<int> getEtherProtocolVersion() =>
      (super.noSuchMethod(Invocation.method(#getEtherProtocolVersion, []),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<_i5.SyncInformation> getSyncStatus() =>
      (super.noSuchMethod(Invocation.method(#getSyncStatus, []),
              returnValue:
                  Future<_i5.SyncInformation>.value(_FakeSyncInformation_4()))
          as _i10.Future<_i5.SyncInformation>);
  @override
  _i10.Future<_i4.EthereumAddress> coinbaseAddress() =>
      (super.noSuchMethod(Invocation.method(#coinbaseAddress, []),
              returnValue:
                  Future<_i4.EthereumAddress>.value(_FakeEthereumAddress_5()))
          as _i10.Future<_i4.EthereumAddress>);
  @override
  _i10.Future<bool> isMining() =>
      (super.noSuchMethod(Invocation.method(#isMining, []),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<int> getMiningHashrate() =>
      (super.noSuchMethod(Invocation.method(#getMiningHashrate, []),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<_i6.EtherAmount> getGasPrice() =>
      (super.noSuchMethod(Invocation.method(#getGasPrice, []),
              returnValue: Future<_i6.EtherAmount>.value(_FakeEtherAmount_6()))
          as _i10.Future<_i6.EtherAmount>);
  @override
  _i10.Future<int> getBlockNumber() =>
      (super.noSuchMethod(Invocation.method(#getBlockNumber, []),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<_i7.BlockInformation> getBlockInformation(
          {String? blockNumber = r'latest', bool? isContainFullObj = true}) =>
      (super.noSuchMethod(
              Invocation.method(#getBlockInformation, [], {
                #blockNumber: blockNumber,
                #isContainFullObj: isContainFullObj
              }),
              returnValue:
                  Future<_i7.BlockInformation>.value(_FakeBlockInformation_7()))
          as _i10.Future<_i7.BlockInformation>);
  @override
  _i10.Future<_i6.EtherAmount> getBalance(_i4.EthereumAddress? address,
          {_i14.BlockNum? atBlock}) =>
      (super.noSuchMethod(
              Invocation.method(#getBalance, [address], {#atBlock: atBlock}),
              returnValue: Future<_i6.EtherAmount>.value(_FakeEtherAmount_6()))
          as _i10.Future<_i6.EtherAmount>);
  @override
  _i10.Future<_i12.Uint8List> getStorage(
          _i4.EthereumAddress? address, BigInt? position,
          {_i14.BlockNum? atBlock}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getStorage, [address, position], {#atBlock: atBlock}),
              returnValue: Future<_i12.Uint8List>.value(_i12.Uint8List(0)))
          as _i10.Future<_i12.Uint8List>);
  @override
  _i10.Future<int> getTransactionCount(_i4.EthereumAddress? address,
          {_i14.BlockNum? atBlock}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getTransactionCount, [address], {#atBlock: atBlock}),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<_i8.TransactionInformation> getTransactionByHash(
          String? transactionHash) =>
      (super.noSuchMethod(
              Invocation.method(#getTransactionByHash, [transactionHash]),
              returnValue: Future<_i8.TransactionInformation>.value(
                  _FakeTransactionInformation_8()))
          as _i10.Future<_i8.TransactionInformation>);
  @override
  _i10.Future<_i8.TransactionReceipt?> getTransactionReceipt(String? hash) =>
      (super.noSuchMethod(Invocation.method(#getTransactionReceipt, [hash]),
              returnValue: Future<_i8.TransactionReceipt?>.value())
          as _i10.Future<_i8.TransactionReceipt?>);
  @override
  _i10.Future<_i12.Uint8List> getCode(_i4.EthereumAddress? address,
          {_i14.BlockNum? atBlock}) =>
      (super.noSuchMethod(
              Invocation.method(#getCode, [address], {#atBlock: atBlock}),
              returnValue: Future<_i12.Uint8List>.value(_i12.Uint8List(0)))
          as _i10.Future<_i12.Uint8List>);
  @override
  _i10.Future<List<_i8.FilterEvent>> getLogs(_i8.FilterOptions? options) =>
      (super.noSuchMethod(Invocation.method(#getLogs, [options]),
              returnValue:
                  Future<List<_i8.FilterEvent>>.value(<_i8.FilterEvent>[]))
          as _i10.Future<List<_i8.FilterEvent>>);
  @override
  _i10.Future<String> sendTransaction(
          _i4.Credentials? cred, _i8.Transaction? transaction,
          {int? chainId = 1, bool? fetchChainIdFromNetworkId = false}) =>
      (super.noSuchMethod(
          Invocation.method(#sendTransaction, [
            cred,
            transaction
          ], {
            #chainId: chainId,
            #fetchChainIdFromNetworkId: fetchChainIdFromNetworkId
          }),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  _i10.Future<String> sendRawTransaction(_i12.Uint8List? signedTransaction) =>
      (super.noSuchMethod(
          Invocation.method(#sendRawTransaction, [signedTransaction]),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  _i10.Future<_i12.Uint8List> signTransaction(
          _i4.Credentials? cred, _i8.Transaction? transaction,
          {int? chainId = 1, bool? fetchChainIdFromNetworkId = false}) =>
      (super.noSuchMethod(
              Invocation.method(#signTransaction, [
                cred,
                transaction
              ], {
                #chainId: chainId,
                #fetchChainIdFromNetworkId: fetchChainIdFromNetworkId
              }),
              returnValue: Future<_i12.Uint8List>.value(_i12.Uint8List(0)))
          as _i10.Future<_i12.Uint8List>);
  @override
  _i10.Future<List<dynamic>> call(
          {_i4.EthereumAddress? sender,
          _i15.DeployedContract? contract,
          _i15.ContractFunction? function,
          List<dynamic>? params,
          _i14.BlockNum? atBlock}) =>
      (super.noSuchMethod(
              Invocation.method(#call, [], {
                #sender: sender,
                #contract: contract,
                #function: function,
                #params: params,
                #atBlock: atBlock
              }),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i10.Future<List<dynamic>>);
  @override
  _i10.Future<BigInt> estimateGas(
          {_i4.EthereumAddress? sender,
          _i4.EthereumAddress? to,
          _i6.EtherAmount? value,
          BigInt? amountOfGas,
          _i6.EtherAmount? gasPrice,
          _i6.EtherAmount? maxPriorityFeePerGas,
          _i6.EtherAmount? maxFeePerGas,
          _i12.Uint8List? data,
          _i14.BlockNum? atBlock}) =>
      (super.noSuchMethod(
              Invocation.method(#estimateGas, [], {
                #sender: sender,
                #to: to,
                #value: value,
                #amountOfGas: amountOfGas,
                #gasPrice: gasPrice,
                #maxPriorityFeePerGas: maxPriorityFeePerGas,
                #maxFeePerGas: maxFeePerGas,
                #data: data,
                #atBlock: atBlock
              }),
              returnValue: Future<BigInt>.value(_FakeBigInt_3()))
          as _i10.Future<BigInt>);
  @override
  _i10.Future<String> callRaw(
          {_i4.EthereumAddress? sender,
          _i4.EthereumAddress? contract,
          _i12.Uint8List? data,
          _i14.BlockNum? atBlock}) =>
      (super.noSuchMethod(
          Invocation.method(#callRaw, [], {
            #sender: sender,
            #contract: contract,
            #data: data,
            #atBlock: atBlock
          }),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  _i10.Stream<String> addedBlocks() =>
      (super.noSuchMethod(Invocation.method(#addedBlocks, []),
          returnValue: Stream<String>.empty()) as _i10.Stream<String>);
  @override
  _i10.Stream<String> pendingTransactions() =>
      (super.noSuchMethod(Invocation.method(#pendingTransactions, []),
          returnValue: Stream<String>.empty()) as _i10.Stream<String>);
  @override
  _i10.Stream<_i8.FilterEvent> events(_i8.FilterOptions? options) =>
      (super.noSuchMethod(Invocation.method(#events, [options]),
              returnValue: Stream<_i8.FilterEvent>.empty())
          as _i10.Stream<_i8.FilterEvent>);
  @override
  _i10.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
}
