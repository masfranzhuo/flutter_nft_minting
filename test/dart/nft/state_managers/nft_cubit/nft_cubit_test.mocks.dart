// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_nft_minting/test/dart/nft/state_managers/nft_cubit/nft_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_nft_minting/core/error/failure.dart' as _i8;
import 'package:flutter_nft_minting/core/use_case.dart' as _i9;
import 'package:flutter_nft_minting/nft/repositories/nft_repository.dart'
    as _i2;
import 'package:flutter_nft_minting/nft/use_cases/get_contract.dart' as _i12;
import 'package:flutter_nft_minting/nft/use_cases/get_image_url.dart' as _i14;
import 'package:flutter_nft_minting/nft/use_cases/get_name.dart' as _i6;
import 'package:flutter_nft_minting/nft/use_cases/get_symbol.dart' as _i10;
import 'package:flutter_nft_minting/nft/use_cases/get_token_counter.dart'
    as _i11;
import 'package:flutter_nft_minting/nft/use_cases/mint.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:web3dart/contracts.dart' as _i4;
import 'package:web3dart/src/credentials/address.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeNFTRepository_0 extends _i1.Fake implements _i2.NFTRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeContractAbi_2 extends _i1.Fake implements _i4.ContractAbi {}

class _FakeEthereumAddress_3 extends _i1.Fake implements _i5.EthereumAddress {}

class _FakeContractFunction_4 extends _i1.Fake implements _i4.ContractFunction {
}

class _FakeContractEvent_5 extends _i1.Fake implements _i4.ContractEvent {}

/// A class which mocks [GetName].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetName extends _i1.Mock implements _i6.GetName {
  MockGetName() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NFTRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeNFTRepository_0()) as _i2.NFTRepository);
  @override
  _i7.Future<_i3.Either<_i8.Failure, String>> call(_i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i8.Failure, String>>.value(
                  _FakeEither_1<_i8.Failure, String>()))
          as _i7.Future<_i3.Either<_i8.Failure, String>>);
}

/// A class which mocks [GetSymbol].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSymbol extends _i1.Mock implements _i10.GetSymbol {
  MockGetSymbol() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NFTRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeNFTRepository_0()) as _i2.NFTRepository);
  @override
  _i7.Future<_i3.Either<_i8.Failure, String>> call(_i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i8.Failure, String>>.value(
                  _FakeEither_1<_i8.Failure, String>()))
          as _i7.Future<_i3.Either<_i8.Failure, String>>);
}

/// A class which mocks [GetTokenCounter].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTokenCounter extends _i1.Mock implements _i11.GetTokenCounter {
  MockGetTokenCounter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NFTRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeNFTRepository_0()) as _i2.NFTRepository);
  @override
  _i7.Future<_i3.Either<_i8.Failure, int>> call(_i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i8.Failure, int>>.value(
                  _FakeEither_1<_i8.Failure, int>()))
          as _i7.Future<_i3.Either<_i8.Failure, int>>);
}

/// A class which mocks [GetContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetContract extends _i1.Mock implements _i12.GetContract {
  MockGetContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NFTRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeNFTRepository_0()) as _i2.NFTRepository);
  @override
  _i7.Future<_i3.Either<_i8.Failure, _i4.DeployedContract>> call(
          _i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i8.Failure, _i4.DeployedContract>>.value(
                      _FakeEither_1<_i8.Failure, _i4.DeployedContract>()))
          as _i7.Future<_i3.Either<_i8.Failure, _i4.DeployedContract>>);
}

/// A class which mocks [Mint].
///
/// See the documentation for Mockito's code generation for more information.
class MockMint extends _i1.Mock implements _i13.Mint {
  MockMint() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NFTRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeNFTRepository_0()) as _i2.NFTRepository);
  @override
  _i7.Future<_i3.Either<_i8.Failure, bool>> call(_i13.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i8.Failure, bool>>.value(
                  _FakeEither_1<_i8.Failure, bool>()))
          as _i7.Future<_i3.Either<_i8.Failure, bool>>);
}

/// A class which mocks [GetImageURL].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetImageURL extends _i1.Mock implements _i14.GetImageURL {
  MockGetImageURL() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NFTRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeNFTRepository_0()) as _i2.NFTRepository);
  @override
  _i7.Future<_i3.Either<_i8.Failure, String>> call(_i14.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i8.Failure, String>>.value(
                  _FakeEither_1<_i8.Failure, String>()))
          as _i7.Future<_i3.Either<_i8.Failure, String>>);
}

/// A class which mocks [DeployedContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeployedContract extends _i1.Mock implements _i4.DeployedContract {
  MockDeployedContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ContractAbi get abi => (super.noSuchMethod(Invocation.getter(#abi),
      returnValue: _FakeContractAbi_2()) as _i4.ContractAbi);
  @override
  _i5.EthereumAddress get address =>
      (super.noSuchMethod(Invocation.getter(#address),
          returnValue: _FakeEthereumAddress_3()) as _i5.EthereumAddress);
  @override
  List<_i4.ContractFunction> get functions =>
      (super.noSuchMethod(Invocation.getter(#functions),
          returnValue: <_i4.ContractFunction>[]) as List<_i4.ContractFunction>);
  @override
  List<_i4.ContractEvent> get events =>
      (super.noSuchMethod(Invocation.getter(#events),
          returnValue: <_i4.ContractEvent>[]) as List<_i4.ContractEvent>);
  @override
  Iterable<_i4.ContractFunction> get constructors => (super.noSuchMethod(
      Invocation.getter(#constructors),
      returnValue: <_i4.ContractFunction>[]) as Iterable<_i4.ContractFunction>);
  @override
  Iterable<_i4.ContractFunction> findFunctionsByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#findFunctionsByName, [name]),
              returnValue: <_i4.ContractFunction>[])
          as Iterable<_i4.ContractFunction>);
  @override
  _i4.ContractFunction function(String? name) =>
      (super.noSuchMethod(Invocation.method(#function, [name]),
          returnValue: _FakeContractFunction_4()) as _i4.ContractFunction);
  @override
  _i4.ContractEvent event(String? name) =>
      (super.noSuchMethod(Invocation.method(#event, [name]),
          returnValue: _FakeContractEvent_5()) as _i4.ContractEvent);
}
