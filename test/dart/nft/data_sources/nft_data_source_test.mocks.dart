// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_nft_minting/test/dart/nft/data_sources/nft_data_source_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:flutter_nft_minting/core/platform/smart_contract_web3_client.dart'
    as _i4;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:web3dart/web3dart.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClient_0 extends _i1.Fake implements _i2.Client {}

class _FakeWeb3Client_1 extends _i1.Fake implements _i3.Web3Client {}

class _FakeDeployedContract_2 extends _i1.Fake implements _i3.DeployedContract {
}

class _FakeContractAbi_3 extends _i1.Fake implements _i3.ContractAbi {}

class _FakeEthereumAddress_4 extends _i1.Fake implements _i3.EthereumAddress {}

class _FakeContractFunction_5 extends _i1.Fake implements _i3.ContractFunction {
}

class _FakeContractEvent_6 extends _i1.Fake implements _i3.ContractEvent {}

/// A class which mocks [SmartContractWeb3Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockSmartContractWeb3Client extends _i1.Mock
    implements _i4.SmartContractWeb3Client {
  MockSmartContractWeb3Client() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get httpClient =>
      (super.noSuchMethod(Invocation.getter(#httpClient),
          returnValue: _FakeClient_0()) as _i2.Client);
  @override
  set httpClient(_i2.Client? _httpClient) =>
      super.noSuchMethod(Invocation.setter(#httpClient, _httpClient),
          returnValueForMissingStub: null);
  @override
  _i3.Web3Client get web3Client =>
      (super.noSuchMethod(Invocation.getter(#web3Client),
          returnValue: _FakeWeb3Client_1()) as _i3.Web3Client);
  @override
  set web3Client(_i3.Web3Client? _web3Client) =>
      super.noSuchMethod(Invocation.setter(#web3Client, _web3Client),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.DeployedContract> getContract(
          {String? contractName, String? contractFileLocation}) =>
      (super.noSuchMethod(
              Invocation.method(#getContract, [], {
                #contractName: contractName,
                #contractFileLocation: contractFileLocation
              }),
              returnValue:
                  Future<_i3.DeployedContract>.value(_FakeDeployedContract_2()))
          as _i5.Future<_i3.DeployedContract>);
  @override
  _i5.Future<dynamic> callContract(
          {_i3.DeployedContract? contract,
          String? functionName,
          List<dynamic>? params = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#callContract, [], {
            #contract: contract,
            #functionName: functionName,
            #params: params
          }),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> sendTransaction(
          {_i3.DeployedContract? contract,
          String? functionName,
          List<dynamic>? params = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#sendTransaction, [], {
            #contract: contract,
            #functionName: functionName,
            #params: params
          }),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
}

/// A class which mocks [DeployedContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeployedContract extends _i1.Mock implements _i3.DeployedContract {
  MockDeployedContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ContractAbi get abi => (super.noSuchMethod(Invocation.getter(#abi),
      returnValue: _FakeContractAbi_3()) as _i3.ContractAbi);
  @override
  _i3.EthereumAddress get address =>
      (super.noSuchMethod(Invocation.getter(#address),
          returnValue: _FakeEthereumAddress_4()) as _i3.EthereumAddress);
  @override
  List<_i3.ContractFunction> get functions =>
      (super.noSuchMethod(Invocation.getter(#functions),
          returnValue: <_i3.ContractFunction>[]) as List<_i3.ContractFunction>);
  @override
  List<_i3.ContractEvent> get events =>
      (super.noSuchMethod(Invocation.getter(#events),
          returnValue: <_i3.ContractEvent>[]) as List<_i3.ContractEvent>);
  @override
  Iterable<_i3.ContractFunction> get constructors => (super.noSuchMethod(
      Invocation.getter(#constructors),
      returnValue: <_i3.ContractFunction>[]) as Iterable<_i3.ContractFunction>);
  @override
  Iterable<_i3.ContractFunction> findFunctionsByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#findFunctionsByName, [name]),
              returnValue: <_i3.ContractFunction>[])
          as Iterable<_i3.ContractFunction>);
  @override
  _i3.ContractFunction function(String? name) =>
      (super.noSuchMethod(Invocation.method(#function, [name]),
          returnValue: _FakeContractFunction_5()) as _i3.ContractFunction);
  @override
  _i3.ContractEvent event(String? name) =>
      (super.noSuchMethod(Invocation.method(#event, [name]),
          returnValue: _FakeContractEvent_6()) as _i3.ContractEvent);
}
