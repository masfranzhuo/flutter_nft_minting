// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_nft_minting/test/dart/nft/repositories/nft_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:flutter_nft_minting/core/platform/smart_contract_web3_client.dart'
    as _i3;
import 'package:flutter_nft_minting/nft/data_sources/nft_data_source.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:web3dart/web3dart.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDeployedContract_0 extends _i1.Fake implements _i2.DeployedContract {
}

class _FakeEventParams_1 extends _i1.Fake implements _i3.EventParams {}

class _FakeContractAbi_2 extends _i1.Fake implements _i2.ContractAbi {}

class _FakeEthereumAddress_3 extends _i1.Fake implements _i2.EthereumAddress {}

class _FakeContractFunction_4 extends _i1.Fake implements _i2.ContractFunction {
}

class _FakeContractEvent_5 extends _i1.Fake implements _i2.ContractEvent {}

/// A class which mocks [NFTDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNFTDataSource extends _i1.Mock implements _i4.NFTDataSource {
  MockNFTDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> getName() =>
      (super.noSuchMethod(Invocation.method(#getName, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> getSymbol() =>
      (super.noSuchMethod(Invocation.method(#getSymbol, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<int> getTokenCounter() =>
      (super.noSuchMethod(Invocation.method(#getTokenCounter, []),
          returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<_i2.DeployedContract> getContract() =>
      (super.noSuchMethod(Invocation.method(#getContract, []),
              returnValue:
                  Future<_i2.DeployedContract>.value(_FakeDeployedContract_0()))
          as _i5.Future<_i2.DeployedContract>);
  @override
  _i5.Future<void> mint(
          {_i2.DeployedContract? contract,
          String? tokenURI,
          String? address}) =>
      (super.noSuchMethod(
          Invocation.method(#mint, [],
              {#contract: contract, #tokenURI: tokenURI, #address: address}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<String> getImageUrl(
          {_i2.DeployedContract? contract, int? tokenCounter}) =>
      (super.noSuchMethod(
          Invocation.method(#getImageUrl, [],
              {#contract: contract, #tokenCounter: tokenCounter}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i3.EventParams> mintEvent({_i2.DeployedContract? contract}) =>
      (super.noSuchMethod(
              Invocation.method(#mintEvent, [], {#contract: contract}),
              returnValue: Future<_i3.EventParams>.value(_FakeEventParams_1()))
          as _i5.Future<_i3.EventParams>);
}

/// A class which mocks [DeployedContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeployedContract extends _i1.Mock implements _i2.DeployedContract {
  MockDeployedContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ContractAbi get abi => (super.noSuchMethod(Invocation.getter(#abi),
      returnValue: _FakeContractAbi_2()) as _i2.ContractAbi);
  @override
  _i2.EthereumAddress get address =>
      (super.noSuchMethod(Invocation.getter(#address),
          returnValue: _FakeEthereumAddress_3()) as _i2.EthereumAddress);
  @override
  List<_i2.ContractFunction> get functions =>
      (super.noSuchMethod(Invocation.getter(#functions),
          returnValue: <_i2.ContractFunction>[]) as List<_i2.ContractFunction>);
  @override
  List<_i2.ContractEvent> get events =>
      (super.noSuchMethod(Invocation.getter(#events),
          returnValue: <_i2.ContractEvent>[]) as List<_i2.ContractEvent>);
  @override
  Iterable<_i2.ContractFunction> get constructors => (super.noSuchMethod(
      Invocation.getter(#constructors),
      returnValue: <_i2.ContractFunction>[]) as Iterable<_i2.ContractFunction>);
  @override
  Iterable<_i2.ContractFunction> findFunctionsByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#findFunctionsByName, [name]),
              returnValue: <_i2.ContractFunction>[])
          as Iterable<_i2.ContractFunction>);
  @override
  _i2.ContractFunction function(String? name) =>
      (super.noSuchMethod(Invocation.method(#function, [name]),
          returnValue: _FakeContractFunction_4()) as _i2.ContractFunction);
  @override
  _i2.ContractEvent event(String? name) =>
      (super.noSuchMethod(Invocation.method(#event, [name]),
          returnValue: _FakeContractEvent_5()) as _i2.ContractEvent);
}

/// A class which mocks [EventParams].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventParams extends _i1.Mock implements _i3.EventParams {
  MockEventParams() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i2.FilterEvent> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.FilterEvent>.empty())
          as _i5.Stream<_i2.FilterEvent>);
  @override
  _i2.ContractEvent get contractEvent =>
      (super.noSuchMethod(Invocation.getter(#contractEvent),
          returnValue: _FakeContractEvent_5()) as _i2.ContractEvent);
}
